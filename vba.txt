Sub Cria_Matrix()
    Dim matrix() As Integer
    Dim i,j,k,x As Integer 

End Sub


# Macro para salvar arquivo como PDF
Sub SaveAsPDF()
    Dim WsA As Worksheet
    Dim strName As String
    Set wsA = ActiveSheet
    strName = "C:\YourFilename.PDF"

    wsA.ExportAsFixedFormatType:=xlTypePDF,Filename:=strName, Quality:=xlQualityStandard,Cria_Matrix_
    IncludeDocProperties:=True,IgnorePrintAreas:=False,OpenAferPublish:=True

End Sub


 
# Macro para remover duplicadas - Deu erros ver depois o porque
Sub RemoveDuplicates()
    Dim rng = As Range
    Set rng = Selection

    'Copiar os valores para outra planilha 
    rng.Copy
    Set ws = Worksheet.Add
    With ws.Range("A1")
        .PasteSpecialxlPasteValues
        .PasteSpecialxlPasteFormats
    End With

    ws.UsedRange.RemoveDuplicates Column:=1, Header:=xlYes

End Sub



# Macro para remover espaços em branco - Deu erros ver depois o porque
Sub DeleteBlankRows() 
    Dim rng As Range
    Set rng = Selection
    rng.SpecialCell(xlCellTypeBlanks).EntireRow.Delete
End Sub

//SAQUE
Sub saque()
    Dim cem, cinquenta, vinte, dez, cinco, dois, um, saque, qtdnotas, total_notas As Double
    saque = InputBox("Digite o valor do Saque")

    cem = saque / 100
    saque = saque - cem * 100

    cinquenta = saque / 50
    saque = saque - cinquenta * 50

    vinte = saque / 20
    saque = saque - vinte * 20
    
    dez = saque / 10
    saque = saque - dez * 10

    cinco = saque / 5
    saque = saque - cinco * 5

    dois = saque / 2
    saque = saque - dois * 2

    um =  saque

    total_notas = cem + cinquenta + vinte + dez + cinco + dois + um
    MsgBox ("Notas de 100 usadas = " & cem)
    MsgBox ("Notas de 50 usadas = " & cinquenta)
    MsgBox ("Notas de 20 usadas = " & vinte)
    MsgBox ("Notas de 10 usadas = " & dez)
    MsgBox ("Notas de 5 usadas = " & cinco)
    MsgBox ("Notas de 2 usadas = " & dois)
    MsgBox ("Notas de 1 usadas = " & um)
    MsgBox ("Quantidade de notas usadas = " & total_notas)
    
    
End Sub

//MAIOR ENTRE DOIS VALORES 
Sub Maior ()
    Dim n1, n2 As Integer
    n1 = Range("D9")
    n2 = Range("F6")

    If n1 > n2 then
        MsgBox("D9 maior que F6")
    Elseif n1 < n2 then 
        MsgBox("F6 maior que D9")
    Else   
        MsgBox("Os valores são iguais")
    End if 

End Sub

//PRECO DA MAÇA
Sub preco_maca()
    Dim qtd As integer
    Dim preco, total_pagar As Double
    qtd = InputBox("Digite a quantidade de maças")
    If qtd >= 12 then
        total_pagar = qtd * 1 
    Else 
        total_pagar = qtd * 1.30
    End if
    MsgBox("O valor total a pagar é de R$" & total_pagar)
End Sub 


//POSITIVO NEGATIVO OU NULO
Sub posi_nega_nulo()
    Dim n As integer
    n = InputBox("Digite um número")
    If n > 0 Then 
        MsgBox(n & " é um número positivo")
    Elseif n < 0 then
        MsgBox(n & " é um número negativo")
    Else
        MsgBox(n & " é um número nulo")
    End If

End Sub 

//TRIANGULO RETÂNGULO 
Sub triangulo_retangulo()
    Dim a, b, c, aux As Integer
    MsgBox("Digite três números naturais")
    a = InputBox()
    b = InputBox()
    c = InputBox()
    
    'Colocar o maior dos números no a 
    If b > a then 
         aux = a 
         a = b 
         b = aux
    Elseif c > a Then
        aux = a 
        a = c
        c = aux 
    End If

    'Ver se b e c são catetos de um triangulo com a de hipotenusa
    If (a * a = b * b + c * c) then
        MsgBox("O triangulo é retangulo")
    Else 
        MsgBox("O triangulo não é retangulo")
    End if

End Sub

//TIPOS TRIÂNGULO 
Sub tipos_triangulo()
    Dim a, b, c, aux As Integer
    MsgBox("Digite três números naturais")
    a = InputBox("Digite o valor de a ")
    b = InputBox("Digite o valor de b ")
    c = InputBox("Digite o valor de c ")

    'Se é um Triângulo
    If (a + b) > c Then 
        MsgBox("É um triângulo")
    Elseif a = b = c Then 
        MsgBox("É um triângulo Equilátero")
    Elseif a = b Or b = c Then
        MsgBox("É um triângulo Isósceles")
    Elseif a <> b or b <> c Then 
        MsgBox("É um triângulo Escaleno")
    End If 

End Sub 

//DIA DA SEMANA 
Sub Dia_semana()
    Dim x, As Integer
    Dim continuar  As String 
    continuar = "sim"
    While continuar <> "não"   
        x = InputBox("Digite um número")
        'Condições 
        If x = 1 then
            MsgBox(x & " correponde á Domingo")
        Elseif x = 2 then
            MsgBox(x & " correponde á Segunda-Feira")
        Elseif x = 3 then 
            MsgBox(x & " correponde á Terça-Feira")
        Elseif x = 4 then 
            MsgBox(x & " correponde á Quarta-Feira")
        Elseif x = 5 then 
            MsgBox(x & " correponde á Quinta-Feira")
        Elseif x = 6 then 
            MsgBox(x & " correponde á Sexta-Feira")
        Elseif x = 7 then 
            MsgBox(x & " correponde á Sábado")
        Else 
            MsgBox("Valor inválido")
        End if 
        continuar = InputBox("Deseja continuar?")
    Wend
End Sub 

//INTEIRO PAR OU IMPAR
Sub inteiro_par_ou_impar()
    Dim n As Integer
    Dim resposta As Boolean
    n = InputBox("Digite um valor para n")
    
    if n Mod 2  = 0 then 
        resposta = True
    Else 
        resposta = False 
    End if

    if resposta = True then 
        MsgBox("Inteiro PAR")
    else 
        MsgBox("Inteiro IMPAR")
    End if
End Sub


//VOGAL OU CONSOANTE
Sub Vogal_ou_Consoante
    Dim l As String 
    l = InputBox("Digite uma letra")
    if l =  "a" or l = "e" or l ="i" or l ="o" or l = "u" then 
    MsgBox(l & " é Vogal")
    else 
        MsgBox(l & " é Consoante")
    End if
    
End Sub

//PESO IDEAL 
Sub Peso_ideal()
    Dim h, peso_ideal As Double
    Dim s As String
    h = InputBox("Digite a sua altura")
    s = InputBox("Digite o seu Sexo, H para Homem e M para Mulher")
    If s = "H" then  
        peso_ideal = (72.7*h) - 58 
    Else 
        peso_ideal  = (62.1*h) - 44.7
    End if 
    MsgBox("O peso é " & peso_ideal)    
End Sub

//Segundo_Grau
Sub Segundo_Grau()
    Dim a, b, c, x1, x2, delta As Integer
    a = InputBox("Digite o valor de 'a'")
    b = InputBox("Digite o valor de 'b'")
    c = InputBox("Digite o valor de 'c'")
    delta = (b * b) - (4 * a * c)
    If delta > 0 Then
        MsgBox ("A equação tem duas raizes reais")
        x1 = (-b + Sqr(delta)) / (2*a)  
        x2 = (-b - Sqr(delta)) / (2*a)  
        Range("A1") = "Duas raízes reais"
        Range("A2") = x1
        Range("A3") = x2
    ElseIf delta < 0 Then
        MsgBox ("A equação não tem raiz real")
        Range("A1") = "Nenhuma raiz real"
    Else
        MsgBox ("A equação tem uma raíz real")
        range("A1") = "Uma raiz real" 
        x1 = (-b + Sqr(delta)) / (2*a)  
        x2 = (-b - Sqr(delta)) / (2*a)  
        range("A2") = x1
    End If
End Sub


//PSEUDO_CODIGO
Sub Pseudo_codigo()
    Dim x, y, z As Integer
    Dim resposta As String
    x = InputBox("Digite o valor de X")
    y = InputBox("Digite o valor de Y")
    z = (x*y) + 5
    if z <= 0 then 
        resposta = "A"
    else if z <= 100 then 
        resposta = "B"
    else 
        resposta = "C"
    end if 
    MsgBox("O valor de Z é " & z & " e a resposta é " & resposta)
End Sub
 

 //MEDIDAS
Sub calculos()
    Dim x, y, z, escolha, resultado As Integer
    x = InputBox("Digite o valor do primeiro número")
    y = InputBox("Digite o valor do segundo número")
    z = InputBox("Digite o valor do terceiro número")

    escolha = InputBox("Escolha um número de 1 a 4")

    if escolha = 1 then 
        resultado = (x * y * z) 
    elseif escolha = 2  then 
        resultado = (x + 2 * y + 3 * z)/6
    elseif escolha = 3 
        resultado = 1 / ((1/x) + (1/y) + (1/z))
    else 
        resultado = (x+y+z)/3
    
End Sub

//APOSSENTADORIA
Sub Aposentado()
    Dim idade, tempoTrabalho, ano As Integer 
    
    idade = InputBox("Digite o ano de nascimento do funcionário")
    tempoTrabalho = InputBox("Digite o ano que o funcionário entrou na empresa")

    idade = 2024 - idade 
    tempoTrabalho = 2024 - tempoTrabalho    

    if idade >= 65 then
        MsgBox("Requer Aposentadoria")
    elseif tempoTrabalho > 30 then 
        MsgBox("Requer Aposentadoria")
    elseif idade = 60 And tempoTrabalho = 25 then
        MsgBox("Requer Aposentadoria")
    else
        MsgBox("Não requer Aposentadoria")
    end if

End Sub 

//COMBUSTÍVEL 
Sub combustivel()
    Dim tipoCombustivel As String 
    Dim litros, desconto, preco, Valorpagar As Integer
    'VALOR LITRO GASOLINA = R$ 5.67
    'VALOR LITRO ÁLCOOL = R$ 4.67
    tipoCombustivel = InputBox("Digite o tipo do combustível "A" para Álcool e "G" para Gasolina") 
    litros = InputBox("Digite a quantidade de litros") 
    if tipoCombustivel = "A" then 
        preco = 4.67
        if litros <= 20 then 
            Valorpagar = preco - (preco * 0.03)
        else litros > 20 then 
            Valorpagar = preco - (preco * 0.05)
        end if
        MsgBox("Você vai pagar R$ " & Valorpagar & "pela Gasolina")

    elseif tipoCombustivel = "G" then
        if litros <= 20 then
            Valorpagar = preco - (preco * 0.04)
        else
            Valorpagar = preco - (preco * 0.06)
        end if
        MsgBox("Você vai pagar R$ " & Valorpagar & "pelo Álcool")
    end if
end sub 


//LER ARQUIVOS DENTRO DE UMA PASTA 
Sub LerPasta()
    Dim pasta As String
    Dim arquivo As String
    Dim linha As Integer

    linha = 1
    pasta = "C:\Users\Rodrigo\Documents\Livros"
    'Dir(pasta & "\*.pdf", vbNormal) - mudar o tipo de arquivo
    'para buscar por um tipo específico 
    arquivo = Dir(pasta & "\*.pdf", vbNormal)

    Do While arquivo <> ""
        Cells(linha, 1) = arquivo
        linha = linha + 1
        arquivo = Dir
    Loop

End Sub



//LER ARQUIVOS DENTRO DE UMA PASTA 
sub LerPasta()
    Dim pasta As String 
    Dim arquivo As String 
    Dim linha As integer

    linha = 1
    pasta = thisworkbook.path & "\"
    arquivo = dir(pasta) 

    do while arquivo <> ""
        cells(linha,1) = arquivo 
        linha = linha + 1 
        arquivo = dir
    loop

end sub

//Menu operações
Sub menuOperacoes()
    Dim n1, n2, choice, ad, sub, mult, div As integer
    n1  = InputBox("Digite o primeiro valor: ")
    n2  = InputBox("Digite o segundo valor: ")
    MsgBox("1 - Soma de dois números" & vbNewline & "2 - Diferença entre dois números (maior pelo menor)" & vbNewline & "3 - Produto entre dois números" & vbNewline & "4 - Divisão entre dois números (O denominador não pode ser zero)") 
    choice = InputBox("Digite a opção:")

    if choice = 1 then
      ad = a+b   
      MsgBox("Resultado = " & ad)  
    elseif choice = 2 then
        if a > b then  
            sub = a - b
            MsgBox("Resultado = " & sub)
        else 
            sub = b - a 
            MsgBox("Resultado = " & sub)
        end if 
    elseif choice = 3 then 
        mult = a * b
        MsgBox("Resultado = " & mult)
    else 
        div = a / b
        MsgBox("Resultado = " & div)
    end if 

End sub 


//COPIAR E COLAR INFORMAÇÕES
Sub copy()
    'Range("A1").copy - copiar valor da célula
    'Range("A10").Select - selecionar a célula
    'ActiveSheet.Paste - colar o valor
    Range("A10").Select
    'ActiveCell.Value = "Bertolo" - preechendo a célula selecionada com uma string
    
End Sub


//REMOVE PASSWORD FROM VBA PROJECT 

Option Explicit

Private Const PAGE_EXECUTE_READWRITE = &H40

Private Declare PtrSafe Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
(Destination As LongPtr, Source As LongPtr, ByVal Length As LongPtr)

Private Declare PtrSafe Function VirtualProtect Lib "kernel32" (lpAddress As LongPtr, _
ByVal dwSize As LongPtr, ByVal flNewProtect As LongPtr, lpflOldProtect As LongPtr) As LongPtr

Private Declare PtrSafe Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As LongPtr

Private Declare PtrSafe Function GetProcAddress Lib "kernel32" (ByVal hModule As LongPtr, _
ByVal lpProcName As String) As LongPtr

Private Declare PtrSafe Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As LongPtr, _
ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, _
ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer

Dim HookBytes(0 To 11) As Byte
Dim OriginBytes(0 To 11) As Byte
Dim pFunc As LongPtr
Dim Flag As Boolean

Private Function GetPtr(ByVal Value As LongPtr) As LongPtr
    GetPtr = Value
End Function

Public Sub RecoverBytes()
    If Flag Then MoveMemory ByVal pFunc, ByVal VarPtr(OriginBytes(0)), 12
End Sub

Public Function Hook() As Boolean
    Dim TmpBytes(0 To 11) As Byte
    Dim p As LongPtr, osi As Byte
    Dim OriginProtect As LongPtr

    Hook = False

    #If Win64 Then
        osi = 1
    #Else
        osi = 0
    #End If

    pFunc = GetProcAddress(GetModuleHandleA("user32.dll"), "DialogBoxParamA")

    If VirtualProtect(ByVal pFunc, 12, PAGE_EXECUTE_READWRITE, OriginProtect) <> 0 Then

        MoveMemory ByVal VarPtr(TmpBytes(0)), ByVal pFunc, osi + 1
        If TmpBytes(osi) <> &HB8 Then

            MoveMemory ByVal VarPtr(OriginBytes(0)), ByVal pFunc, 12

            p = GetPtr(AddressOf MyDialogBoxParam)

            If osi Then HookBytes(0) = &H48
            HookBytes(osi) = &HB8
            osi = osi + 1
            MoveMemory ByVal VarPtr(HookBytes(osi)), ByVal VarPtr(p), 4 * osi
            HookBytes(osi + 4 * osi) = &HFF
            HookBytes(osi + 4 * osi + 1) = &HE0

            MoveMemory ByVal pFunc, ByVal VarPtr(HookBytes(0)), 12
            Flag = True
            Hook = True
        End If
    End If
End Function

Private Function MyDialogBoxParam(ByVal hInstance As LongPtr, _
ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, _
ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer

    If pTemplateName = 4070 Then
        MyDialogBoxParam = 1
    Else
        RecoverBytes
        MyDialogBoxParam = DialogBoxParam(hInstance, pTemplateName, _
                   hWndParent, lpDialogFunc, dwInitParam)
        Hook
    End If
End Function

Sub unprotected()
    If Hook Then
        MsgBox "VBA Project is unprotected!", vbInformation, "*****"
    End If
End Sub
